<?xml version="1.0" encoding="UTF-8"?>
<indexing>
 <object alt="" name="Image1" object_type="graphic"/>
 <object alt="" name="Image2" object_type="graphic"/>
 <object alt="" name="Image3 Copy 1" object_type="graphic"/>
 <object alt="" name="Image4" object_type="graphic"/>
 <object alt="" name="Image5" object_type="graphic"/>
 <object alt="" name="Image6" object_type="graphic"/>
 <object alt="" name="Image7" object_type="graphic"/>
 <object alt="" name="Image8" object_type="graphic"/>
 <object alt="" name="Image9" object_type="graphic"/>
 <object alt="" name="Image10" object_type="graphic"/>
 <paragraph index="39" node_type="writer">Q.1</paragraph>
 <paragraph index="40" node_type="writer">W23</paragraph>
 <paragraph index="41" node_type="writer">(a) Explain HTTP Request and Response. 03</paragraph>
 <paragraph index="42" node_type="writer">HTTP stands for Hypertext Transfer Protocol.</paragraph>
 <paragraph index="43" node_type="writer">HTTP is based on the client-server architecture model.</paragraph>
 <paragraph index="44" node_type="writer">TCP protocols are used to open a channel between sever and client.</paragraph>
 <paragraph index="45" node_type="writer">An HTTP &quot;client&quot; is a program (Web browser) that establishes a connection to a server for the</paragraph>
 <paragraph index="46" node_type="writer">purpose of sending one or more HTTP request messages.</paragraph>
 <paragraph index="47" node_type="writer">An HTTP &quot;server&quot; is a program (generally a web server like Apache Web Server) that accepts</paragraph>
 <paragraph index="48" node_type="writer">connections in order to serve HTTP requests by sending HTTP response messages.</paragraph>
 <paragraph index="50" node_type="writer">HTTP Request</paragraph>
 <paragraph index="52" node_type="writer">The HTTP request message consist of following,</paragraph>
 <paragraph index="53" node_type="writer">A request line (e.g. GET /index.php HTTP1.1)</paragraph>
 <paragraph index="54" node_type="writer">Request header fields (e.g. Accept-Language: en)</paragraph>
 <paragraph index="55" node_type="writer">An empty line</paragraph>
 <paragraph index="56" node_type="writer">An optional message body</paragraph>
 <paragraph index="57" node_type="writer">A request line contains the method of request followed by the resource we want and at the end</paragraph>
 <paragraph index="58" node_type="writer">protocol version used.</paragraph>
 <paragraph index="59" node_type="writer">HTTP Request Methods: GET, POST, PUT, DELETE etc…</paragraph>
 <paragraph index="61" node_type="writer">HTTP Response</paragraph>
 <paragraph index="63" node_type="writer">After receiving and interpreting a HTTP request message, a server responds with an HTTP</paragraph>
 <paragraph index="64" node_type="writer">response message.</paragraph>
 <paragraph index="65" node_type="writer">The HTTP response message consist of following,</paragraph>
 <paragraph index="66" node_type="writer">Status-Line (format= HTTP-Version SP Status-Code)</paragraph>
 <paragraph index="67" node_type="writer">An empty line</paragraph>
 <paragraph index="68" node_type="writer">An optional message body</paragraph>
 <paragraph index="69" node_type="writer">Status-Line consist of</paragraph>
 <paragraph index="70" node_type="writer">HTTP-Version, which can be HTTP/1.1</paragraph>
 <paragraph index="71" node_type="writer">Status-Code is a 3 digit code which is in below format</paragraph>
 <paragraph index="72" node_type="writer">1xx: Informational - Request received, continuing process</paragraph>
 <paragraph index="73" node_type="writer">2xx: Success - The action was successfully received, understood, and accepted</paragraph>
 <paragraph index="74" node_type="writer">3xx: Redirection - Further action must be taken in order to complete the request</paragraph>
 <paragraph index="75" node_type="writer">4xx: Client Error - The request contains bad syntax or cannot be fulfilled</paragraph>
 <paragraph index="76" node_type="writer">5xx: Server Error - The server failed to fulfill an apparently valid request</paragraph>
 <paragraph index="80" node_type="writer">(b) What is Web security? Explain in details. 04</paragraph>
 <paragraph index="81" node_type="writer">It basically means protecting a website or web application by detecting, preventing and responding to cyber threats</paragraph>
 <paragraph index="82" node_type="writer">protection of websites, web applications, and web services security is vital.</paragraph>
 <paragraph index="83" node_type="writer">Any website or application that is secure is surely backed by different types of checkpoints and techniques for keeping it safe.</paragraph>
 <paragraph index="84" node_type="writer">There are different types of technologies available for preventing threats.</paragraph>
 <paragraph index="85" node_type="writer">Stolen Data: Cyber-criminals frequently hacks visitor’s data that is stored on a website like email addresses, payment information, and a few other details.</paragraph>
 <paragraph index="86" node_type="writer">Phishing schemes: This is not just related to email, but through phishing, hackers design a layout that looks exactly like the website to trick the user by compelling them to give their sensitive details.</paragraph>
 <paragraph index="87" node_type="writer">Session hijacking: Certain cyber attackers can take over a user’s session and compel them to take undesired actions on a site.</paragraph>
 <paragraph index="88" node_type="writer">Web security is extremely important, especially for websites or web applications that deal</paragraph>
 <paragraph index="89" node_type="writer">with confidential, private, or protected information.</paragraph>
 <paragraph index="90" node_type="writer">Security methods are evolving to match the different types of vulnerabilities that come into</paragraph>
 <paragraph index="91" node_type="writer">existence.</paragraph>
 <paragraph index="92" node_type="writer">	</paragraph>
 <paragraph index="95" node_type="writer">(c) Explain how basic and nested tables are created using HTML. 07</paragraph>
 <paragraph index="96" node_type="writer">Basic table</paragraph>
 <paragraph index="97" node_type="writer">&lt;table  border=1&gt;</paragraph>
 <paragraph index="98" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="99" node_type="writer">&lt;th&gt;Heading1&lt;/th&gt;</paragraph>
 <paragraph index="100" node_type="writer">&lt;th&gt;Heading2&lt;/th&gt;</paragraph>
 <paragraph index="101" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="102" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="103" node_type="writer">&lt;td&gt;Row1 Col1 Data&lt;/td&gt;</paragraph>
 <paragraph index="104" node_type="writer">&lt;td&gt;Row1 Col2 Data&lt;/td&gt;</paragraph>
 <paragraph index="105" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="106" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="107" node_type="writer">&lt;td&gt;Row2 Col1 Data&lt;/td&gt;</paragraph>
 <paragraph index="108" node_type="writer">&lt;td&gt;Row2 Col2 Data&lt;/td&gt;</paragraph>
 <paragraph index="109" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="110" node_type="writer">&lt;/table&gt;</paragraph>
 <paragraph index="117" node_type="writer">Nested tables</paragraph>
 <paragraph index="118" node_type="writer">&lt;table  border=1&gt;</paragraph>
 <paragraph index="119" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="120" node_type="writer">&lt;table&gt;</paragraph>
 <paragraph index="121" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="122" node_type="writer">&lt;th&gt;Heading1T1&lt;/th&gt;</paragraph>
 <paragraph index="123" node_type="writer">&lt;th&gt;Heading2T1&lt;/th&gt;</paragraph>
 <paragraph index="124" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="125" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="126" node_type="writer">&lt;td&gt;Row1 Col1 Data&lt;/td&gt;</paragraph>
 <paragraph index="127" node_type="writer">&lt;td&gt;Row1 Col2 Data&lt;/td&gt;</paragraph>
 <paragraph index="128" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="129" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="130" node_type="writer">&lt;td&gt;Row2 Col1 Data&lt;/td&gt;</paragraph>
 <paragraph index="131" node_type="writer">&lt;td&gt;Row2 Col2 Data&lt;/td&gt;</paragraph>
 <paragraph index="132" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="133" node_type="writer">&lt;/table&gt;</paragraph>
 <paragraph index="134" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="135" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="136" node_type="writer">&lt;table&gt;</paragraph>
 <paragraph index="137" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="138" node_type="writer">&lt;th&gt;Heading1T2&lt;/th&gt;</paragraph>
 <paragraph index="139" node_type="writer">&lt;th&gt;Heading2T2&lt;/th&gt;</paragraph>
 <paragraph index="140" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="141" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="142" node_type="writer">&lt;td&gt;Row1 Col1 Data&lt;/td&gt;</paragraph>
 <paragraph index="143" node_type="writer">&lt;td&gt;Row1 Col2 Data&lt;/td&gt;</paragraph>
 <paragraph index="144" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="145" node_type="writer">&lt;tr&gt;</paragraph>
 <paragraph index="146" node_type="writer">&lt;td&gt;Row2 Col1 Data&lt;/td&gt;</paragraph>
 <paragraph index="147" node_type="writer">&lt;td&gt;Row2 Col2 Data&lt;/td&gt;</paragraph>
 <paragraph index="148" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="149" node_type="writer">&lt;/table&gt;</paragraph>
 <paragraph index="150" node_type="writer">&lt;/tr&gt;</paragraph>
 <paragraph index="151" node_type="writer">&lt;/table&gt;</paragraph>
 <paragraph index="154" node_type="writer">W22</paragraph>
 <paragraph index="155" node_type="writer">(a) Define term : WWW 03</paragraph>
 <paragraph index="156" node_type="writer">WWW is stands for World Wide Web.</paragraph>
 <paragraph index="157" node_type="writer">It is a collection of websites or web pages stored in web servers and connected to local</paragraph>
 <paragraph index="158" node_type="writer">computers through the internet.</paragraph>
 <paragraph index="159" node_type="writer">These websites contain text pages, digital images, audios, videos, etc.</paragraph>
 <paragraph index="160" node_type="writer">Users can access the content of these sites from any part of the world over the internet using their devices.</paragraph>
 <paragraph index="161" node_type="writer">The World Wide Web is a global information medium which users can read and write via computer connected to the internet.</paragraph>
 <paragraph index="162" node_type="writer">A web is given an online address called a URL.</paragraph>
 <paragraph index="163" node_type="writer">World Wide Web is like a huge book whose pages are stored on multiple servers across the world</paragraph>
 <paragraph index="164" node_type="writer">Small websites store all of their WebPages on a single server, but big websites or organizations place their WebPages on different servers in different countries so that when users of a country search their site they could get the information quickly from the nearest server.</paragraph>
 <paragraph index="174" node_type="writer">(b) Explain the Architecture of Web Browser. 04</paragraph>
 <paragraph index="193" node_type="writer">User Interface: The user interface is an area where the user can use several options like address bar, back and forward button, menu, bookmarking, and many other options to interact with the browser.</paragraph>
 <paragraph index="194" node_type="writer">Browser Engine: It connects the UI (User Interface) and the rendering engine as a bridge.</paragraph>
 <paragraph index="195" node_type="writer">It queries and manipulates the rendering engine based on inputs from several user interfaces.</paragraph>
 <paragraph index="196" node_type="writer">Rendering Engine: It is responsible for displaying the requested content on the browser screen. </paragraph>
 <paragraph index="197" node_type="writer">It translates the HTML, XML files, and images, which are formatted by using the CSS.</paragraph>
 <paragraph index="198" node_type="writer">It generates the layout of the content and displays it on the browser screen.</paragraph>
 <paragraph index="199" node_type="writer">Networking: It retrieves the URLs by using internet protocols like HTTP or FTP.</paragraph>
 <paragraph index="200" node_type="writer">It is responsible for maintaining all aspects of Internet communication and security.</paragraph>
 <paragraph index="201" node_type="writer">Furthermore, it may be used to cache a retrieved document to reduce network traffic.</paragraph>
 <paragraph index="202" node_type="writer">JavaScript Interpreter: translates and executes the JavaScript code, which is included in a website.</paragraph>
 <paragraph index="203" node_type="writer">The translated results are sent to the rendering engine to display results on the device screen.</paragraph>
 <paragraph index="204" node_type="writer">UI Backend: It is used to draw basic combo boxes and Windows (widgets).</paragraph>
 <paragraph index="205" node_type="writer">It specifies a generic interface, which is not platform-specific.</paragraph>
 <paragraph index="206" node_type="writer">Data Storage: The data storage is a persistence layer that is used by the browser to store all sorts of information locally, like cookies.</paragraph>
 <paragraph index="207" node_type="writer">A browser also supports different storage mechanisms such as IndexedDB, WebSQL, localStorage, and FileSystem.</paragraph>
 <paragraph index="208" node_type="writer">It is a database stored on the local drive of your computer where the browser is installed. It handles user data like cache, bookmarks, cookies, and preferences.</paragraph>
 <paragraph index="212" node_type="writer">(c) Elaborate HTTP Protocol Header, HTTP Request and HTTP. Response 07 RE</paragraph>
 <paragraph index="217" node_type="writer">W21</paragraph>
 <paragraph index="218" node_type="writer">(a) Define term : WWW 03 RE</paragraph>
 <paragraph index="220" node_type="writer">(b) List out any four HTML Tag and describe their functionality. 04</paragraph>
 <paragraph index="221" node_type="writer">H1-H6</paragraph>
 <paragraph index="222" node_type="writer">Table, tr, td, th</paragraph>
 <paragraph index="223" node_type="writer">p</paragraph>
 <paragraph index="224" node_type="writer">ul, ol, li</paragraph>
 <paragraph index="225" node_type="writer">explain it by your self</paragraph>
 <paragraph index="228" node_type="writer">(c) Elaborate HTTP Protocol Header, HTTP Request and HTTP Response 07 RE</paragraph>
 <paragraph index="249" node_type="writer">Q.2 </paragraph>
 <paragraph index="250" node_type="writer">W23</paragraph>
 <paragraph index="251" node_type="writer">(a) Explain types of CSS. 03</paragraph>
 <paragraph index="252" node_type="writer">1. Inline Style</paragraph>
 <paragraph index="253" node_type="writer">Inline CSS has the highest priority out of external, internal, and inline CSS.</paragraph>
 <paragraph index="254" node_type="writer">If you want to add a style inside an HTML element all you have to do is specify the desired CSS properties with the style HTML attribute.</paragraph>
 <paragraph index="255" node_type="writer">&lt;p style=&quot;background: blue; color: white;&quot;&gt; My Inline CSS &lt;/p&gt;</paragraph>
 <paragraph index="257" node_type="writer">2. Internal/Embedded Style sheet</paragraph>
 <paragraph index="258" node_type="writer">This type of CSS is only for Single Web Page.</paragraph>
 <paragraph index="259" node_type="writer">When using internal CSS, we must add a new tag, &lt;style&gt;, inside the &lt;head&gt; tag.</paragraph>
 <paragraph index="260" node_type="writer">&lt;html&gt;</paragraph>
 <paragraph index="261" node_type="writer">&lt;head&gt;</paragraph>
 <paragraph index="262" node_type="writer">&lt;style type=&quot;text/css&quot;&gt;</paragraph>
 <paragraph index="263" node_type="writer">p{ color: red;}</paragraph>
 <paragraph index="264" node_type="writer">&lt;/style&gt;</paragraph>
 <paragraph index="265" node_type="writer">&lt;/head&gt;</paragraph>
 <paragraph index="266" node_type="writer">&lt;body&gt;</paragraph>
 <paragraph index="267" node_type="writer">&lt;p&gt;Your page's content!&lt;/p&gt;</paragraph>
 <paragraph index="268" node_type="writer">&lt;/body&gt;</paragraph>
 <paragraph index="269" node_type="writer">&lt;/html&gt;</paragraph>
 <paragraph index="270" node_type="writer">3. External Style Sheet</paragraph>
 <paragraph index="271" node_type="writer">When using CSS it is preferable to keep the CSS separate from your HTML.</paragraph>
 <paragraph index="272" node_type="writer">External CSS is a file that contains only CSS code and is saved with a &quot;.css&quot; file extension.</paragraph>
 <paragraph index="274" node_type="writer">TEST.html</paragraph>
 <paragraph index="275" node_type="writer">&lt;html&gt;</paragraph>
 <paragraph index="276" node_type="writer">&lt;head&gt;</paragraph>
 <paragraph index="277" node_type="writer">&lt;link rel=&quot;stylesheet&quot; href=&quot;xyz.css&quot;&gt;</paragraph>
 <paragraph index="278" node_type="writer">&lt;/head&gt;</paragraph>
 <paragraph index="279" node_type="writer">&lt;body&gt;</paragraph>
 <paragraph index="280" node_type="writer">&lt;p&gt;Your page's content!&lt;/p&gt;</paragraph>
 <paragraph index="281" node_type="writer">&lt;/body&gt;</paragraph>
 <paragraph index="282" node_type="writer">&lt;/html&gt;</paragraph>
 <paragraph index="283" node_type="writer">xyz.css</paragraph>
 <paragraph index="284" node_type="writer">p</paragraph>
 <paragraph index="285" node_type="writer">{</paragraph>
 <paragraph index="286" node_type="writer">color:&quot;red&quot;;</paragraph>
 <paragraph index="287" node_type="writer">text-align: center;</paragraph>
 <paragraph index="288" node_type="writer">}</paragraph>
 <paragraph index="295" node_type="writer">(b) Write short note on CSS variables. 04</paragraph>
 <paragraph index="296" node_type="writer">The var() function is used to insert the value of a CSS variable.</paragraph>
 <paragraph index="297" node_type="writer">you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries.</paragraph>
 <paragraph index="298" node_type="writer">var(--name, value).</paragraph>
 <object index="299" name="Table1" object_type="table"/>
 <paragraph index="301" node_type="writer" parent_index="299">name</paragraph>
 <paragraph index="304" node_type="writer" parent_index="299">Required. The variable name (must start with two dashes)</paragraph>
 <paragraph index="307" node_type="writer" parent_index="299">value</paragraph>
 <paragraph index="310" node_type="writer" parent_index="299">Optional. The fallback value (used if the variable is not found)</paragraph>
 <paragraph index="313" node_type="writer">The name in var is case sensitive</paragraph>
 <paragraph index="314" node_type="writer">xyz.css</paragraph>
 <paragraph index="315" node_type="writer">:root</paragraph>
 <paragraph index="316" node_type="writer">{</paragraph>
 <paragraph index="317" node_type="writer">--blue = #0000ff;</paragraph>
 <paragraph index="318" node_type="writer">--red = #ff0000;</paragraph>
 <paragraph index="319" node_type="writer">}</paragraph>
 <paragraph index="320" node_type="writer">p</paragraph>
 <paragraph index="321" node_type="writer">{</paragraph>
 <paragraph index="322" node_type="writer">color:var(--red,#ff0000);</paragraph>
 <paragraph index="323" node_type="writer">text-align: center;</paragraph>
 <paragraph index="324" node_type="writer">}</paragraph>
 <paragraph index="325" node_type="writer">li</paragraph>
 <paragraph index="326" node_type="writer">{</paragraph>
 <paragraph index="327" node_type="writer">color:var(--blue);</paragraph>
 <paragraph index="328" node_type="writer">}</paragraph>
 <paragraph index="332" node_type="writer">(c) Create HTML form (Font Color: Blue, set image as background) using CSS. 07</paragraph>
 <paragraph index="334" node_type="writer">OR(c) Create Time Table in HTML form using Table Tag. 07</paragraph>
 <paragraph index="383" node_type="writer">W22</paragraph>
 <paragraph index="384" node_type="writer">(a) Define term: SEO 03</paragraph>
 <paragraph index="385" node_type="writer">SEO stands for Search Engine Optimization.</paragraph>
 <paragraph index="386" node_type="writer">It improves website visibility in search engine results pages.</paragraph>
 <paragraph index="387" node_type="writer">The goal of SEO is to increase organic (non-paid) traffic to a website.</paragraph>
 <paragraph index="388" node_type="writer">SEO involves keyword research to identify search terms users commonly use.</paragraph>
 <paragraph index="389" node_type="writer">Content optimization ensures relevance and quality for targeted keywords.</paragraph>
 <paragraph index="390" node_type="writer">SEO focuses on optimizing website elements like titles and meta tags.</paragraph>
 <paragraph index="391" node_type="writer">SEO includes activities like building backlinks from other sites.</paragraph>
 <paragraph index="392" node_type="writer">SEO ensures the website is fast, mobile-friendly, and error-free.</paragraph>
 <paragraph index="393" node_type="writer">Tools like Google Analytics and Search Console help monitor SEO performance.</paragraph>
 <paragraph index="394" node_type="writer">SEO is an ongoing process to adapt to search engine algorithm updates.</paragraph>
 <paragraph index="398" node_type="writer">(b) Explain ordered and unordered list with example. 04</paragraph>
 <paragraph index="403" node_type="writer">(c) Give the difference between Client side Scripting and Server Side Scripting. 07</paragraph>
 <object index="405" name="Table2" object_type="table"/>
 <paragraph index="407" node_type="writer" parent_index="405">Client-side scripting</paragraph>
 <paragraph index="410" node_type="writer" parent_index="405">Server-side scripting</paragraph>
 <paragraph index="413" node_type="writer" parent_index="405">Source code is visible to the user.</paragraph>
 <paragraph index="416" node_type="writer" parent_index="405">Source code is not visible to the user because its output of server-sideside is an HTML page. </paragraph>
 <paragraph index="419" node_type="writer" parent_index="405">Its main function is to provide the requested output to the end user.</paragraph>
 <paragraph index="422" node_type="writer" parent_index="405">Its primary function is to provide access to the respective database as per the request.</paragraph>
 <paragraph index="425" node_type="writer" parent_index="405">It usually depends on the browser and its version.</paragraph>
 <paragraph index="428" node_type="writer" parent_index="405">In this any server-side technology can be used and it does not depend on the client. </paragraph>
 <paragraph index="431" node_type="writer" parent_index="405">It runs on the user’s computer.</paragraph>
 <paragraph index="434" node_type="writer" parent_index="405">It runs on the webserver.</paragraph>
 <paragraph index="437" node_type="writer" parent_index="405">There are many advantages linked with this like faster. </paragraph>
 <paragraph index="440" node_type="writer" parent_index="405">The primary advantage is its ability to highly customize, response. </paragraph>
 <paragraph index="443" node_type="writer" parent_index="405">It does not provide security for data.</paragraph>
 <paragraph index="446" node_type="writer" parent_index="405">It provides more security for data.</paragraph>
 <paragraph index="449" node_type="writer" parent_index="405">It is a technique used in web development in which scripts run on the client’s browser.</paragraph>
 <paragraph index="452" node_type="writer" parent_index="405">Its a technique that uses scripts on the webserver to produce a unique response for each client’s request.</paragraph>
 <paragraph index="455" node_type="writer" parent_index="405">HTML, CSS, and javascript are used.</paragraph>
 <paragraph index="458" node_type="writer" parent_index="405">PHP, Python, Java, Ruby are used.</paragraph>
 <paragraph index="461" node_type="writer" parent_index="405">No need of interaction with the server.</paragraph>
 <paragraph index="464" node_type="writer" parent_index="405">It is all about interacting with the servers.</paragraph>
 <paragraph index="467" node_type="writer" parent_index="405">It reduces load on processing unit of the server.</paragraph>
 <paragraph index="470" node_type="writer" parent_index="405">It surge the processing load on the server.</paragraph>
 <paragraph index="475" node_type="writer">OR(c) What is selector class ? Explain the pseudo class selector in CSS with example. 07</paragraph>
 <paragraph index="476" node_type="writer">The selector can be HTML element, id or class</paragraph>
 <paragraph index="477" node_type="writer">“id” selector</paragraph>
 <paragraph index="478" node_type="writer">The id selector is used to specify a style for a single, unique element.</paragraph>
 <paragraph index="479" node_type="writer">The id selector uses the id attribute of the HTML element, and is defined with a “#” in css.</paragraph>
 <paragraph index="480" node_type="writer">The style rule below will be applied to the element with id=&quot;para1&quot;:</paragraph>
 <paragraph index="481" node_type="writer">HTML</paragraph>
 <paragraph index="482" node_type="writer">&lt;h1 id=“para1”&gt;Hello Friends&lt;/h1&gt;</paragraph>
 <paragraph index="483" node_type="writer">&lt;h1&gt;How are you&lt;/h1&gt;</paragraph>
 <paragraph index="484" node_type="writer">CSS</paragraph>
 <paragraph index="485" node_type="writer">#para1{</paragraph>
 <paragraph index="486" node_type="writer">color: blue;</paragraph>
 <paragraph index="487" node_type="writer">}</paragraph>
 <paragraph index="488" node_type="writer">“class” selector</paragraph>
 <paragraph index="489" node_type="writer">The class selector is used to specify a style for a group of elements.</paragraph>
 <paragraph index="490" node_type="writer">The class selector uses the HTML class attribute, and is defined with a “.” in css.</paragraph>
 <paragraph index="491" node_type="writer">HTML</paragraph>
 <paragraph index="492" node_type="writer">&lt;h1 class=“myClass”&gt;Hello Friends&lt;/h1&gt;</paragraph>
 <paragraph index="493" node_type="writer">&lt;h1 class=“myClass”&gt;How are you&lt;/h1&gt;</paragraph>
 <paragraph index="494" node_type="writer">CSS</paragraph>
 <paragraph index="495" node_type="writer">.myClass{</paragraph>
 <paragraph index="496" node_type="writer">color: blue;</paragraph>
 <paragraph index="497" node_type="writer">}</paragraph>
 <paragraph index="499" node_type="writer">pseudo class selector</paragraph>
 <paragraph index="500" node_type="writer">&lt;html&gt;</paragraph>
 <paragraph index="501" node_type="writer">&lt;head&gt;</paragraph>
 <paragraph index="502" node_type="writer">&lt;style&gt;</paragraph>
 <paragraph index="503" node_type="writer">/* unvisited link */</paragraph>
 <paragraph index="504" node_type="writer">a:link {</paragraph>
 <paragraph index="505" node_type="writer"> 		color: red;</paragraph>
 <paragraph index="506" node_type="writer">}</paragraph>
 <paragraph index="508" node_type="writer">/* visited link */</paragraph>
 <paragraph index="509" node_type="writer">a:visited {</paragraph>
 <paragraph index="510" node_type="writer">  	color: green;</paragraph>
 <paragraph index="511" node_type="writer">}</paragraph>
 <paragraph index="513" node_type="writer">/* mouse over link */</paragraph>
 <paragraph index="514" node_type="writer">a:hover {</paragraph>
 <paragraph index="515" node_type="writer">  		color: yellow;</paragraph>
 <paragraph index="516" node_type="writer">}</paragraph>
 <paragraph index="518" node_type="writer">/* selected link */</paragraph>
 <paragraph index="519" node_type="writer">a:active {</paragraph>
 <paragraph index="520" node_type="writer">  		color: blue;</paragraph>
 <paragraph index="521" node_type="writer">}</paragraph>
 <paragraph index="522" node_type="writer">&lt;/style&gt;</paragraph>
 <paragraph index="523" node_type="writer">&lt;/head&gt;</paragraph>
 <paragraph index="524" node_type="writer">&lt;body&gt;</paragraph>
 <paragraph index="525" node_type="writer">&lt;a href=&quot;default.asp&quot;&gt;This is a link&lt;/a&gt;</paragraph>
 <paragraph index="526" node_type="writer">&lt;/body&gt;</paragraph>
 <paragraph index="527" node_type="writer">&lt;/html&gt;</paragraph>
 <paragraph index="530" node_type="writer">W21</paragraph>
 <paragraph index="531" node_type="writer">(a) Define term: SEO 03 RE</paragraph>
 <paragraph index="533" node_type="writer">(b) Write full form of CSS. Describe types and advantages of CSS. 04</paragraph>
 <paragraph index="534" node_type="writer">CSS - Cascading Style Sheets</paragraph>
 <paragraph index="535" node_type="writer">There are three types of css</paragraph>
 <paragraph index="536" node_type="writer">Inline style</paragraph>
 <paragraph index="537" node_type="writer">Internal style</paragraph>
 <paragraph index="538" node_type="writer">External style</paragraph>
 <paragraph index="539" node_type="writer">Advantages</paragraph>
 <paragraph index="540" node_type="writer">CSS saves time</paragraph>
 <paragraph index="541" node_type="writer">Pages load faster</paragraph>
 <paragraph index="542" node_type="writer">Easy maintenance</paragraph>
 <paragraph index="543" node_type="writer">Superior styles to HTML</paragraph>
 <paragraph index="544" node_type="writer">Multiple Device Compatibility</paragraph>
 <paragraph index="545" node_type="writer">Global web standards</paragraph>
 <paragraph index="546" node_type="writer">Increases readablility of code</paragraph>
 <paragraph index="548" node_type="writer">(c) Create HTML Form for 1st Year Student registration which asks all personal details. 07 RE</paragraph>
 <paragraph index="550" node_type="writer">OR(c) Explain term: Class, ID, Wild card selectors, Media Queries for CSS. 07</paragraph>
 <paragraph index="551" node_type="writer">Class selector:</paragraph>
 <paragraph index="552" node_type="writer">A class selector is used to apply specific styles to multiple elements that share the same class.</paragraph>
 <paragraph index="553" node_type="writer">Can be used by . and class name eg. .classxyz{…} in css </paragraph>
 <paragraph index="554" node_type="writer">In html to access created class use class=&quot;classname&quot; </paragraph>
 <paragraph index="555" node_type="writer">eg. &lt;p class=&quot;Yamamoto&quot;&gt;Bankai Zankano tachi&lt;/p&gt;</paragraph>
 <paragraph index="556" node_type="writer">ID selector</paragraph>
 <paragraph index="557" node_type="writer">An ID selector is used to apply styles to a unique element on the page.</paragraph>
 <paragraph index="558" node_type="writer">Can be used by # and id name eg. #idName{…} in css </paragraph>
 <paragraph index="559" node_type="writer">In html to access created id use id=&quot;idName&quot; </paragraph>
 <paragraph index="560" node_type="writer">eg. &lt;p id=&quot;Nika&quot;&gt;Gomu Gomu no Bajarang gunn!!&lt;/p&gt;</paragraph>
 <paragraph index="561" node_type="writer">Wild card selector</paragraph>
 <paragraph index="562" node_type="writer">The wildcard selector (*) is used to select all elements on a page.</paragraph>
 <paragraph index="563" node_type="writer">Can be used by * and id name eg. *{…} in css </paragraph>
 <paragraph index="564" node_type="writer">It automatically gets applied to every tags in html</paragraph>
 <paragraph index="565" node_type="writer">Media Queries</paragraph>
 <paragraph index="566" node_type="writer">They make a website responsive and adaptable to different devices.</paragraph>
 <paragraph index="567" node_type="writer">Media queries are used to apply styles based on the device's characteristics, such as screen size, resolution, or orientation.</paragraph>
 <paragraph index="569" node_type="writer">body {</paragraph>
 <paragraph index="570" node_type="writer">    background-color: white;</paragraph>
 <paragraph index="571" node_type="writer">}</paragraph>
 <paragraph index="573" node_type="writer">@media (max-width: 768px) {</paragraph>
 <paragraph index="574" node_type="writer">    body {</paragraph>
 <paragraph index="575" node_type="writer">        background-color: lightgray;</paragraph>
 <paragraph index="576" node_type="writer">    }</paragraph>
 <paragraph index="577" node_type="writer">}</paragraph>
 <paragraph index="579" node_type="writer">@media (max-width: 480px) {</paragraph>
 <paragraph index="580" node_type="writer">    body {</paragraph>
 <paragraph index="581" node_type="writer">        background-color: lightblue;</paragraph>
 <paragraph index="582" node_type="writer">    }</paragraph>
 <paragraph index="583" node_type="writer">}</paragraph>
 <paragraph index="589" node_type="writer">Q.3 </paragraph>
 <paragraph index="590" node_type="writer">W23</paragraph>
 <paragraph index="591" node_type="writer">(a) What is Bootstrap? Why we use it. 03</paragraph>
 <paragraph index="592" node_type="writer">Bootstrap is an open-source CSS framework used for designing responsive and mobile-first websites. </paragraph>
 <paragraph index="593" node_type="writer">It provides pre-designed components and utilities such as navigation bars, buttons, forms, grids, and typography.</paragraph>
 <paragraph index="594" node_type="writer">Reasons to Bootstrap</paragraph>
 <paragraph index="595" node_type="writer">Responsive Design</paragraph>
 <paragraph index="596" node_type="writer">Time-Saving</paragraph>
 <paragraph index="597" node_type="writer">Consistency</paragraph>
 <paragraph index="598" node_type="writer">Customizability</paragraph>
 <paragraph index="599" node_type="writer">Cross-Browser Compatibility</paragraph>
 <paragraph index="600" node_type="writer">Ease of Use</paragraph>
 <paragraph index="604" node_type="writer">(b) Explain types of JavaScript. 04</paragraph>
 <paragraph index="605" node_type="writer">Client-side js</paragraph>
 <paragraph index="606" node_type="writer">Server-side js</paragraph>
 <paragraph index="607" node_type="writer">Embedded js</paragraph>
 <paragraph index="608" node_type="writer">Embedded JavaScript refers to JavaScript integrated directly within other languages or frameworks, such as HTML or templating engines. </paragraph>
 <paragraph index="609" node_type="writer">It enhances functionality by allowing to embed scripts for tasks like dynamic content.</paragraph>
 <paragraph index="610" node_type="writer">Core js</paragraph>
 <paragraph index="611" node_type="writer">Core JavaScript refers to the base language without additional libraries or frameworks. </paragraph>
 <paragraph index="612" node_type="writer">It provides the fundamental building blocks such as data types, functions, loops, and objects. </paragraph>
 <paragraph index="613" node_type="writer">It is essential for understanding JavaScript’s principles and is the foundation for creating custom features, frameworks, or tools tailored to specific applications.</paragraph>
 <paragraph index="616" node_type="writer">(c) Write the code of JavaScript to make Pop up box. 07</paragraph>
 <paragraph index="617" node_type="writer">&lt;html&gt; </paragraph>
 <paragraph index="618" node_type="writer">&lt;head&gt; </paragraph>
 <paragraph index="619" node_type="writer">&lt;title&gt;JavaScript Popup Box&lt;/title&gt;</paragraph>
 <paragraph index="620" node_type="writer">&lt;/head&gt; </paragraph>
 <paragraph index="621" node_type="writer">&lt;body&gt;</paragraph>
 <paragraph index="622" node_type="writer">&lt;h1&gt;JavaScript Popup Box Example&lt;/h1&gt; </paragraph>
 <paragraph index="623" node_type="writer">&lt;button onclick=&quot;showPopup()&quot;&gt;Click Me!&lt;/button&gt; </paragraph>
 <paragraph index="624" node_type="writer">&lt;script&gt;</paragraph>
 <paragraph index="625" node_type="writer">function showPopup() { </paragraph>
 <paragraph index="626" node_type="writer">alert(&quot;This is a JavaScript Popup Box!&quot;); </paragraph>
 <paragraph index="627" node_type="writer">} </paragraph>
 <paragraph index="628" node_type="writer">&lt;/script&gt; </paragraph>
 <paragraph index="629" node_type="writer">	&lt;/body&gt;</paragraph>
 <paragraph index="630" node_type="writer">&lt;/html&gt;</paragraph>
 <paragraph index="631" node_type="writer">OR(a) Explain Callbacks in JavaScript. 03</paragraph>
 <paragraph index="632" node_type="writer">A callback is a function passed as an argument to another function.</paragraph>
 <paragraph index="633" node_type="writer">This technique allows a function to call another function.</paragraph>
 <paragraph index="634" node_type="writer">A callback function can run after another function has finished.</paragraph>
 <paragraph index="635" node_type="writer">eg.</paragraph>
 <paragraph index="636" node_type="writer">function div(a,b){return a/b}</paragraph>
 <paragraph index="637" node_type="writer">function mul(a,b){return a*b}</paragraph>
 <paragraph index="638" node_type="writer">function add(a,b){return a+b}</paragraph>
 <paragraph index="639" node_type="writer">function writeit(a,b,fun){alert(&quot;&quot;+a+b+fun(a,b))}</paragraph>
 <paragraph index="640" node_type="writer">writeit(10,15,mul)</paragraph>
 <paragraph index="644" node_type="writer">OR(b) Differentiate between the 'BITWISE AND' and the 'LOGICAL AND'operators in PHP. 04</paragraph>
 <object index="645" name="Table3" object_type="table"/>
 <paragraph index="647" node_type="writer" parent_index="645">Aspect</paragraph>
 <paragraph index="650" node_type="writer" parent_index="645">Bitwise AND (&amp;)</paragraph>
 <paragraph index="653" node_type="writer" parent_index="645">Logical AND (&amp;&amp;)</paragraph>
 <paragraph index="656" node_type="writer" parent_index="645">Operation Type</paragraph>
 <paragraph index="659" node_type="writer" parent_index="645">Works at the bit level. Compares individual bits of operands.</paragraph>
 <paragraph index="662" node_type="writer" parent_index="645">Works at the logical level. Compares boolean expressions.</paragraph>
 <paragraph index="665" node_type="writer" parent_index="645">Input Values</paragraph>
 <paragraph index="668" node_type="writer" parent_index="645">Operands are treated as integers (binary representation).</paragraph>
 <paragraph index="671" node_type="writer" parent_index="645">Operands are treated as boolean values (true/false).</paragraph>
 <paragraph index="674" node_type="writer" parent_index="645">Usage</paragraph>
 <paragraph index="677" node_type="writer" parent_index="645">Used for bit manipulation tasks like masking or setting flags.</paragraph>
 <paragraph index="680" node_type="writer" parent_index="645">Used in conditional statements for logical operations.</paragraph>
 <paragraph index="683" node_type="writer" parent_index="645">Example</paragraph>
 <paragraph index="686" node_type="writer" parent_index="645">5 &amp; 3 → (0101 &amp; 0011) = 0001 → Result: 1.</paragraph>
 <paragraph index="689" node_type="writer" parent_index="645">(5 &gt; 3) &amp;&amp; (3 &gt; 1) → Result: true.</paragraph>
 <paragraph index="692" node_type="writer" parent_index="645">Result</paragraph>
 <paragraph index="695" node_type="writer" parent_index="645">Outputs a number resulting from bit-level operation.</paragraph>
 <paragraph index="698" node_type="writer" parent_index="645">Outputs true or false based on the condition.</paragraph>
 <paragraph index="701" node_type="writer">Eg.</paragraph>
 <paragraph index="702" node_type="writer">	$a=6;</paragraph>
 <paragraph index="703" node_type="writer">	$b=9;</paragraph>
 <paragraph index="704" node_type="writer">	echo ($a&amp;$b);</paragraph>
 <paragraph index="705" node_type="writer">	if ($a&gt;3 &amp;&amp; $b&gt;$a){</paragraph>
 <paragraph index="706" node_type="writer">		echo “Gomu Gomu no Bajarang gunn”</paragraph>
 <paragraph index="707" node_type="writer">	} </paragraph>
 <paragraph index="723" node_type="writer">OR(c) Write a PHP script to sort the elements of an array. 07</paragraph>
 <paragraph index="726" node_type="writer">W22</paragraph>
 <paragraph index="727" node_type="writer">(a) What is meta tag? How it is useful by search engine? 03</paragraph>
 <paragraph index="728" node_type="writer">Meta Tag</paragraph>
 <paragraph index="729" node_type="writer">A meta tag is an HTML element that provides metadata about the webpage, such as description, keywords, author, and other relevant information. </paragraph>
 <paragraph index="730" node_type="writer">These tags are placed inside the &lt;head&gt; section of the HTML document and are not visible to the user on the webpage itself.</paragraph>
 <paragraph index="731" node_type="writer">Meta tags play a crucial role in search engine optimization (SEO). They help search engines understand the content and purpose of a webpage, making it easier for them to index and rank the page appropriately.</paragraph>
 <paragraph index="732" node_type="writer">The &lt;meta name=&quot;description&quot;&gt; tag provides a brief summary of the page’s content. Search engines use it to display a snippet of the page in search results, which can influence click-through rates.</paragraph>
 <paragraph index="733" node_type="writer">The &lt;meta name=&quot;keywords&quot;&gt; tag lists relevant keywords for the page. Although this tag is less influential today, some search engines may still use it to understand the page’s focus.</paragraph>
 <paragraph index="734" node_type="writer">In essence, meta tags help search engines gather and understand essential information about a webpage, impacting its visibility and ranking in search engine results&lt;!DOCTYPE html&gt;</paragraph>
 <paragraph index="735" node_type="writer">&lt;head&gt;</paragraph>
 <paragraph index="736" node_type="writer">	&lt;meta name=&quot;description&quot; content=&quot;A blank page with meta tags for SEO.&quot;&gt;</paragraph>
 <paragraph index="737" node_type="writer">	&lt;meta name=&quot;keywords&quot; content=&quot;HTML, Meta Tags, SEO, Blank Page&quot;&gt;</paragraph>
 <paragraph index="738" node_type="writer">&lt;meta name=&quot;author&quot; content=&quot;Oda&quot;&gt;</paragraph>
 <paragraph index="739" node_type="writer">&lt;/head&gt;</paragraph>
 <paragraph index="740" node_type="writer">(b) What is CSS? Compare inline, embedded and external style sheet with example 04 RE</paragraph>
 <paragraph index="742" node_type="writer">(c) Define Frameset, Frame Tag. Divide the web page into four equal parts each individual part displays different web page.07</paragraph>
 <paragraph index="744" node_type="writer">OR(a) Write CSS code for the following:</paragraph>
 <paragraph index="745" node_type="writer">	i) set the background color for the hover and active link states to &quot;yellow&quot;.RE</paragraph>
 <paragraph index="746" node_type="writer">	ii) Set the list style for unordered lists to &quot;square&quot;.RE</paragraph>
 <paragraph index="747" node_type="writer">	iii) Set &quot;paper.gif&quot; as the background image of the page. RE 03 </paragraph>
 <paragraph index="749" node_type="writer">OR(b) Explain Wildcard Selectors (*, ^ and $) in CSS. 04</paragraph>
 <paragraph index="750" node_type="writer">Contains Selector (*=)</paragraph>
 <paragraph index="751" node_type="writer">&lt;style&gt;</paragraph>
 <paragraph index="752" node_type="writer">      [class*=&quot;str&quot;] {</paragraph>
 <paragraph index="753" node_type="writer">            background: green; color: white; </paragraph>
 <paragraph index="754" node_type="writer">      }</paragraph>
 <paragraph index="755" node_type="writer">&lt;/style&gt; </paragraph>
 <paragraph index="756" node_type="writer">&lt;body&gt; </paragraph>
 <paragraph index="757" node_type="writer">      &lt;div class=&quot;firststr&quot;&gt;This matches because it ends with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="758" node_type="writer">      &lt;div class=&quot;secondstrhere&quot;&gt;This matches because it ends with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="759" node_type="writer">      &lt;div class=&quot;strtihrd&quot;&gt;This does not match because it does not end with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="760" node_type="writer">&lt;/body&gt;</paragraph>
 <paragraph index="761" node_type="writer">Starts With Selector (^=)</paragraph>
 <paragraph index="762" node_type="writer">&lt;style&gt;</paragraph>
 <paragraph index="763" node_type="writer">      [class^=&quot;str&quot;] {</paragraph>
 <paragraph index="764" node_type="writer">            background: green; color: white; </paragraph>
 <paragraph index="765" node_type="writer">      } </paragraph>
 <paragraph index="766" node_type="writer">&lt;/style&gt; </paragraph>
 <paragraph index="767" node_type="writer">&lt;body&gt; </paragraph>
 <paragraph index="768" node_type="writer">      &lt;div class=&quot;firststr&quot;&gt;This matches because it ends with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="769" node_type="writer">      &lt;div class=&quot;secondstrhere&quot;&gt;This matches because it ends with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="770" node_type="writer">      &lt;div class=&quot;strtihrd&quot;&gt;This does not match because it does not end with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="771" node_type="writer">&lt;/body&gt;</paragraph>
 <paragraph index="772" node_type="writer">Ends With Selector ($=)</paragraph>
 <paragraph index="773" node_type="writer">&lt;style&gt;</paragraph>
 <paragraph index="774" node_type="writer">      [class$=&quot;str&quot;] {</paragraph>
 <paragraph index="775" node_type="writer">            background: green; color: white; </paragraph>
 <paragraph index="776" node_type="writer">      } </paragraph>
 <paragraph index="777" node_type="writer">&lt;/style&gt; </paragraph>
 <paragraph index="778" node_type="writer">&lt;body&gt; </paragraph>
 <paragraph index="779" node_type="writer">      &lt;div class=&quot;firststr&quot;&gt;This matches because it ends with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="780" node_type="writer">      &lt;div class=&quot;secondstrhere&quot;&gt;This matches because it ends with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="781" node_type="writer">      &lt;div class=&quot;strtihrd&quot;&gt;This does not match because it does not end with &quot;str&quot;.&lt;/div&gt; </paragraph>
 <paragraph index="782" node_type="writer">&lt;/body&gt;</paragraph>
 <paragraph index="784" node_type="writer">OR(c) Write an HTML and JavaScript program which accepts N as input and print first N odd numbers. 07</paragraph>
 <paragraph index="786" node_type="writer">&lt;html&gt;</paragraph>
 <paragraph index="787" node_type="writer">&lt;body&gt;</paragraph>
 <paragraph index="788" node_type="writer">	&lt;form1&gt;</paragraph>
 <paragraph index="789" node_type="writer">		&lt;script&gt;</paragraph>
 <paragraph index="790" node_type="writer">			function pr(){</paragraph>
 <paragraph index="791" node_type="writer">	    			var inputValue = document.getElementById(&quot;number&quot;).value;</paragraph>
 <paragraph index="792" node_type="writer">	    	    		var i=0;</paragraph>
 <paragraph index="793" node_type="writer">		        		while(i&lt;=inputValue){</paragraph>
 <paragraph index="794" node_type="writer">        					document.write(&quot; &quot;+i);</paragraph>
 <paragraph index="795" node_type="writer">	        				i=i+2;</paragraph>
 <paragraph index="796" node_type="writer">		    	    	}    </paragraph>
 <paragraph index="797" node_type="writer">		  	}</paragraph>
 <paragraph index="798" node_type="writer">		&lt;/script&gt;</paragraph>
 <paragraph index="799" node_type="writer">		&lt;label&gt;Number&lt;/label&gt;</paragraph>
 <paragraph index="800" node_type="writer">		&lt;input type=&quot;text&quot; id=&quot;number&quot;&gt;</paragraph>
 <paragraph index="801" node_type="writer">		&lt;input type=&quot;submit&quot; onclick=&quot;pr()&quot; value=&quot;submit&quot;&gt;</paragraph>
 <paragraph index="802" node_type="writer">	&lt;/form&gt;</paragraph>
 <paragraph index="803" node_type="writer">&lt;/body&gt;</paragraph>
 <paragraph index="804" node_type="writer">&lt;/html&gt;</paragraph>
 <paragraph index="807" node_type="writer">W21</paragraph>
 <paragraph index="808" node_type="writer">(a) Define term: Boot Strap for CSS 03 RE</paragraph>
 <paragraph index="809" node_type="writer">(b) Write java script function to find maximum value among three different value entered by user. </paragraph>
 <paragraph index="810" node_type="writer">04</paragraph>
 <paragraph index="812" node_type="writer">(c) Develop a PHP Code which read stock code and display stock information when user submit page. 07</paragraph>
 <paragraph index="813" node_type="writer">home.php</paragraph>
 <paragraph index="814" node_type="writer">&lt;!DOCTYPE html&gt;</paragraph>
 <paragraph index="815" node_type="writer">&lt;html&gt;</paragraph>
 <paragraph index="816" node_type="writer">	&lt;body&gt;</paragraph>
 <paragraph index="817" node_type="writer">		&lt;form method=&quot;POST&quot; action=&quot;path/to/another.php&quot;&gt;</paragraph>
 <paragraph index="818" node_type="writer">			&lt;label name=&quot;code&quot;&gt;Enter Stock Code &lt;label&gt;</paragraph>
 <paragraph index="819" node_type="writer">			&lt;input type=&quot;text&quot; id=&quot;code&quot; name=&quot;code&quot;&gt;</paragraph>
 <paragraph index="820" node_type="writer">			&lt;input type=&quot;submit&quot;&gt;</paragraph>
 <paragraph index="821" node_type="writer">		&lt;/form&gt;</paragraph>
 <paragraph index="822" node_type="writer">	&lt;/body&gt;</paragraph>
 <paragraph index="823" node_type="writer">&lt;/html&gt;</paragraph>
 <paragraph index="829" node_type="writer">another.php</paragraph>
 <paragraph index="830" node_type="writer">&lt;?php</paragraph>
 <paragraph index="831" node_type="writer">	$code=$_POST[&quot;code&quot;];</paragraph>
 <paragraph index="832" node_type="writer">	if($code==&quot;Toei&quot;){</paragraph>
 <paragraph index="833" node_type="writer">		echo &quot;Name:Zoro &lt;br&gt;&quot;;</paragraph>
 <paragraph index="834" node_type="writer">		echo &quot;Price:111100000&lt;br&gt;&quot;;</paragraph>
 <paragraph index="835" node_type="writer">		echo &quot;Discription: Onigiri &lt;br&gt;&quot;;</paragraph>
 <paragraph index="836" node_type="writer">	}</paragraph>
 <paragraph index="837" node_type="writer">	else{</paragraph>
 <paragraph index="838" node_type="writer">		echo &quot;Name: Ichigo&lt;br&gt;&quot;;</paragraph>
 <paragraph index="839" node_type="writer">		echo &quot;Price: 368&quot;;</paragraph>
 <paragraph index="840" node_type="writer">		echo &quot;Discription: GOAT&lt;br&gt;&quot;;</paragraph>
 <paragraph index="841" node_type="writer">	}</paragraph>
 <paragraph index="842" node_type="writer">?&gt;</paragraph>
 <paragraph index="846" node_type="writer">OR(a) Define term: JSON 03</paragraph>
 <paragraph index="847" node_type="writer">JSON is a data storing formate which is made to make data simple enough to be readed by human</paragraph>
 <paragraph index="848" node_type="writer">JSON is popular form of storing data since it requires less memory because of how optimised it is.</paragraph>
 <paragraph index="849" node_type="writer">Some modern languages has datatypes which supports JSON natively such as js,python.</paragraph>
 <paragraph index="850" node_type="writer">JSON is also being used in APIs</paragraph>
 <paragraph index="851" node_type="writer">Examlpe</paragraph>
 <paragraph index="852" node_type="writer">data = {</paragraph>
 <paragraph index="853" node_type="writer">&quot;anime&quot;:[</paragraph>
 <paragraph index="854" node_type="writer">&quot;one piece&quot;,</paragraph>
 <paragraph index="855" node_type="writer">&quot;attack on titan&quot;,</paragraph>
 <paragraph index="856" node_type="writer">&quot;bleach&quot;,</paragraph>
 <paragraph index="857" node_type="writer">],</paragraph>
 <paragraph index="858" node_type="writer">		&quot;type&quot;:&quot;anime&quot;,</paragraph>
 <paragraph index="859" node_type="writer">};</paragraph>
 <paragraph index="860" node_type="writer">To access element whithin it use data.anime[0] , data.type …</paragraph>
 <paragraph index="864" node_type="writer">OR(b) Describe any four php array function. 04</paragraph>
 <paragraph index="865" node_type="writer">rsort()</paragraph>
 <paragraph index="866" node_type="writer">$arr=array(3,54,23,62,69);</paragraph>
 <paragraph index="867" node_type="writer">rsort($arr);</paragraph>
 <paragraph index="868" node_type="writer">foreach ($arr as $value) {</paragraph>
 <paragraph index="869" node_type="writer">echo $value . &quot; &quot;;</paragraph>
 <paragraph index="870" node_type="writer">}</paragraph>
 <paragraph index="871" node_type="writer">shuffle()</paragraph>
 <paragraph index="872" node_type="writer">$arr=array(3,54,23,62,69);</paragraph>
 <paragraph index="873" node_type="writer">shuffle($arr);</paragraph>
 <paragraph index="874" node_type="writer">foreach ($arr as $value) {</paragraph>
 <paragraph index="875" node_type="writer">echo $value . &quot; &quot;;</paragraph>
 <paragraph index="876" node_type="writer">}</paragraph>
 <paragraph index="878" node_type="writer">sizeof()</paragraph>
 <paragraph index="879" node_type="writer">$arr=array(3,54,23,62,69);</paragraph>
 <paragraph index="880" node_type="writer">echo sizeof($arr);</paragraph>
 <paragraph index="881" node_type="writer">sort()</paragraph>
 <paragraph index="882" node_type="writer">$arr=array(3,54,23,62,69);</paragraph>
 <paragraph index="883" node_type="writer">sort($arr);</paragraph>
 <paragraph index="884" node_type="writer">foreach ($arr as $value) {</paragraph>
 <paragraph index="885" node_type="writer">echo $value . &quot; &quot;;</paragraph>
 <paragraph index="886" node_type="writer">}</paragraph>
 <paragraph index="890" node_type="writer">OR(c) Develop a PHP Code which read employee code, year and month. On submit button press, it generates salary slip for that month-year for that employee. 07</paragraph>
 <paragraph index="891" node_type="writer">In home.html</paragraph>
 <paragraph index="892" node_type="writer">	&lt;!Doctype html&gt;</paragraph>
 <paragraph index="893" node_type="writer">	&lt;html&gt;</paragraph>
 <paragraph index="894" node_type="writer">		&lt;body&gt;</paragraph>
 <paragraph index="895" node_type="writer">			&lt;form method=&quot;POST&quot; action=&quot;otaku.php&quot;&gt;</paragraph>
 <paragraph index="896" node_type="writer">				&lt;label name=&quot;code&quot;&gt;Code&lt;/label&gt;</paragraph>
 <paragraph index="897" node_type="writer">				&lt;input type=&quot;code&quot; id=&quot;code&quot; name=&quot;code&quot;&gt;</paragraph>
 <paragraph index="898" node_type="writer">				&lt;label name=&quot;month&quot;&gt;Month&lt;/label&gt;</paragraph>
 <paragraph index="899" node_type="writer">				&lt;input type=&quot;month&quot; id=&quot;month&quot; name=&quot;month&quot;&gt;</paragraph>
 <paragraph index="900" node_type="writer">				&lt;label name=&quot;year&quot;&gt;Year&lt;/label&gt;</paragraph>
 <paragraph index="901" node_type="writer">				&lt;input type=&quot;year&quot; id=&quot;year&quot; name=&quot;year&quot;&gt;</paragraph>
 <paragraph index="902" node_type="writer">			&lt;/form&gt;</paragraph>
 <paragraph index="903" node_type="writer">		&lt;/body&gt;</paragraph>
 <paragraph index="904" node_type="writer">	&lt;/html&gt;</paragraph>
 <paragraph index="906" node_type="writer">In otaku.php</paragraph>
 <paragraph index="907" node_type="writer">	&lt;!Doctype html&gt;</paragraph>
 <paragraph index="908" node_type="writer">	&lt;html&gt;</paragraph>
 <paragraph index="909" node_type="writer">		&lt;body&gt;</paragraph>
 <paragraph index="910" node_type="writer">			&lt;?php</paragraph>
 <paragraph index="911" node_type="writer">				echo &quot;&lt;div border=1&gt;&quot;;</paragraph>
 <paragraph index="912" node_type="writer">				$year = $_POST[&quot;year&quot;];</paragraph>
 <paragraph index="913" node_type="writer">				$code = $_POST[&quot;code&quot;];</paragraph>
 <paragraph index="914" node_type="writer">				$month = $_POST[&quot;month&quot;];</paragraph>
 <paragraph index="915" node_type="writer">				echo &quot;&lt;p id='year'&gt;Year: $year&lt;/p&gt;&quot;; </paragraph>
 <paragraph index="916" node_type="writer">				echo &quot;&lt;p id='month'&gt;Month: $month&lt;/p&gt;&quot;; </paragraph>
 <paragraph index="917" node_type="writer">				echo &quot;&lt;p id='code'&gt;Code: $code&lt;/p&gt;&quot;; </paragraph>
 <paragraph index="918" node_type="writer">				if ($year == &quot;2006&quot; &amp;&amp; $month == &quot;2&quot; &amp;&amp; code==&quot;666&quot;)</paragraph>
 <paragraph index="919" node_type="writer">				{</paragraph>
 <paragraph index="920" node_type="writer">					$name=&quot;Mahesh dalal&quot;;</paragraph>
 <paragraph index="921" node_type="writer">					$salary=&quot;70000&quot;;</paragraph>
 <paragraph index="922" node_type="writer">					echo &quot;&lt;p id='name'&gt;Name: $name&lt;/p&gt;&quot;; </paragraph>
 <paragraph index="923" node_type="writer">					echo &quot;&lt;p id='salary'&gt;Salary: $salary&lt;/p&gt;&quot;;</paragraph>
 <paragraph index="924" node_type="writer">				}</paragraph>
 <paragraph index="925" node_type="writer">				else</paragraph>
 <paragraph index="926" node_type="writer">				{</paragraph>
 <paragraph index="927" node_type="writer">					$name=&quot;Zoro the navigator&quot;;</paragraph>
 <paragraph index="928" node_type="writer">					$salary=&quot;111100000&quot;;</paragraph>
 <paragraph index="929" node_type="writer">					echo &quot;&lt;p id='name'&gt;Name: $name&lt;/p&gt;&quot;; </paragraph>
 <paragraph index="930" node_type="writer">					echo &quot;&lt;p id='salary'&gt;Salary: $salary&lt;/p&gt;&quot;;</paragraph>
 <paragraph index="931" node_type="writer">				}</paragraph>
 <paragraph index="932" node_type="writer">				echo &quot;&lt;/div&gt;&quot;;</paragraph>
 <paragraph index="933" node_type="writer">			?&gt;</paragraph>
 <paragraph index="934" node_type="writer">		&lt;/body&gt;</paragraph>
 <paragraph index="935" node_type="writer">	&lt;/html&gt;</paragraph>
 <paragraph index="973" node_type="writer">Q.4</paragraph>
 <paragraph index="974" node_type="writer">W23</paragraph>
 <paragraph index="975" node_type="writer">(a) What is session Management? 03</paragraph>
 <paragraph index="976" node_type="writer">The server and client are aware of each other only when the current request after that client and server forgot about each other, so that browser cannot get information between different request across the web pages.</paragraph>
 <paragraph index="977" node_type="writer">Hnece the syncronisation between different pages gets difficult to manage and requires resources a lot.</paragraph>
 <paragraph index="978" node_type="writer">To make server remembe about the client’s existance we use sessions.</paragraph>
 <paragraph index="979" node_type="writer">Sessions gets stred in server side.</paragraph>
 <paragraph index="980" node_type="writer">Because of that Sessions are much more secure compare to cookies.</paragraph>
 <paragraph index="981" node_type="writer">Session is size independent to store as many data the user wants</paragraph>
 <paragraph index="982" node_type="writer">Eg. to perform login-logout we use sessions</paragraph>
 <paragraph index="984" node_type="writer">(b) Differentiate between for and foreach statements in PHP. 04</paragraph>
 <paragraph index="985" node_type="writer">for</paragraph>
 <paragraph index="986" node_type="writer">&lt;?php</paragraph>
 <paragraph index="987" node_type="writer">	$arr=[3,23,54,62,69];</paragraph>
 <paragraph index="988" node_type="writer">	for ($x=0;$x&lt;5;$x++){</paragraph>
 <paragraph index="989" node_type="writer">		echo $a.&quot; &quot;;</paragraph>
 <paragraph index="990" node_type="writer">	}</paragraph>
 <paragraph index="991" node_type="writer">?&gt;</paragraph>
 <paragraph index="993" node_type="writer">for each</paragraph>
 <paragraph index="994" node_type="writer">&lt;?php</paragraph>
 <paragraph index="995" node_type="writer">	$arr=[3,23,54,62,69];</paragraph>
 <paragraph index="996" node_type="writer">	foreach ($arr as $a){</paragraph>
 <paragraph index="997" node_type="writer">		echo $a&gt;&quot; &quot;;</paragraph>
 <paragraph index="998" node_type="writer">	}</paragraph>
 <paragraph index="999" node_type="writer">?&gt;</paragraph>
 <paragraph index="1001" node_type="writer">(c) What is DOM? Explain with example. 07</paragraph>
 <paragraph index="1002" node_type="writer">The Document Object Model is a platform and language neutral interface that will allow programs and scripts to dynamically access and update the content</paragraph>
 <paragraph index="1003" node_type="writer">When we write :</paragraph>
 <paragraph index="1004" node_type="writer">document.write(“Hello World”);</paragraph>
 <paragraph index="1005" node_type="writer">We are actually writing :</paragraph>
 <paragraph index="1006" node_type="writer">window.document.write(“Hello World”);</paragraph>
 <paragraph index="1007" node_type="writer">The window is just there by default</paragraph>
 <paragraph index="1008" node_type="writer">All the client side objects are connected to the window object.</paragraph>
 <paragraph index="1009" node_type="writer">getElementById()</paragraph>
 <paragraph index="1010" node_type="writer">getElementsByName()</paragraph>
 <paragraph index="1011" node_type="writer">html :	&lt;form name=“myForm”&gt;...</paragraph>
 <paragraph index="1012" node_type="writer">js:	var a = document.forms[“myForm”];</paragraph>
 <paragraph index="1013" node_type="writer">	var u = a.uname.value;</paragraph>
 <paragraph index="1014" node_type="writer">	var p = a.pword.value;</paragraph>
 <paragraph index="1016" node_type="writer">OR(a) Difference between Server side programming &amp; Client side programming 03 RE</paragraph>
 <paragraph index="1017" node_type="writer">OR(b) Describe in details: Cookie and Session 04</paragraph>
 <paragraph index="1018" node_type="writer">A cookie in PHP is a small file with a maximum size of 4KB </paragraph>
 <paragraph index="1019" node_type="writer">The web server stores cookies on the client computer. </paragraph>
 <paragraph index="1020" node_type="writer">They are typically used to keep track of information such as a username that the site can retrieve to personalize the page when the user visits the website next time.</paragraph>
 <paragraph index="1021" node_type="writer">A cookie can only be read from the domain that it has been issued from. </paragraph>
 <paragraph index="1022" node_type="writer">Cookies are usually set in an HTTP header but JavaScript can also set a cookie directly on a browser.</paragraph>
 <paragraph index="1023" node_type="writer">Cookies aren’t as secure as sessions.</paragraph>
 <paragraph index="1025" node_type="writer">OR(c) What is the use of a constructor function in JavaScript? Explain with suitable example. 07</paragraph>
 <paragraph index="1026" node_type="writer">A constructor function in JavaScript is used to create and initialize objects of a specific type.</paragraph>
 <paragraph index="1027" node_type="writer">It acts like a blueprint for creating multiple objects with the same structure and behavior.</paragraph>
 <paragraph index="1028" node_type="writer">The function's name is usually capitalized (e.g., Person) to distinguish it from regular functions.</paragraph>
 <paragraph index="1029" node_type="writer">The this keyword is used to refer to the newly created object.</paragraph>
 <paragraph index="1030" node_type="writer">Constructor functions are called using the new keyword.</paragraph>
 <paragraph index="1032" node_type="writer">function Person(name, age, city) {</paragraph>
 <paragraph index="1033" node_type="writer">    this.name = name;</paragraph>
 <paragraph index="1034" node_type="writer">    this.age = age;</paragraph>
 <paragraph index="1035" node_type="writer">    this.city = city;</paragraph>
 <paragraph index="1036" node_type="writer">    this.introduce = function() {</paragraph>
 <paragraph index="1037" node_type="writer">        return &quot;Hi, I'm ${this.name}, ${this.age} years old from ${this.city}.&quot;;</paragraph>
 <paragraph index="1038" node_type="writer">    };</paragraph>
 <paragraph index="1039" node_type="writer">}</paragraph>
 <paragraph index="1041" node_type="writer">const crew1 = new Person(&quot;Zoro&quot;, 21, &quot;East blue&quot;);</paragraph>
 <paragraph index="1042" node_type="writer">const crew2 = new Person(&quot;Sanji&quot;, 21, &quot;North blue&quot;);</paragraph>
 <paragraph index="1044" node_type="writer">alert(crew1.name); </paragraph>
 <paragraph index="1045" node_type="writer">alert(crew2.introduce());</paragraph>
 <paragraph index="1049" node_type="writer">W22</paragraph>
 <paragraph index="1050" node_type="writer">(a) Define term : JSON 03 RE</paragraph>
 <paragraph index="1051" node_type="writer">(b) Write a java script code to find whether given number is prime or not. 04 RE</paragraph>
 <paragraph index="1052" node_type="writer">(c) Explain pop-up boxes in javascript with example. 07</paragraph>
 <paragraph index="1053" node_type="writer">person = prompt(&quot;Please enter your name&quot;, &quot;Harry Potter&quot;);</paragraph>
 <paragraph index="1054" node_type="writer">if (confirm(&quot;Press a button!&quot;)) {echo &quot;Baaankaaiiiiii&quot;}</paragraph>
 <paragraph index="1055" node_type="writer">alert(&quot;I am an alert box!&quot;);</paragraph>
 <paragraph index="1059" node_type="writer">OR(a) Interpret PHP Function: Implode and Explode 03</paragraph>
 <paragraph index="1060" node_type="writer">Implode is used to convert array as string with any character or string as differentiator.</paragraph>
 <paragraph index="1061" node_type="writer">Explode is used to split string into array by differentiator.</paragraph>
 <paragraph index="1065" node_type="writer">OR(b) Differentiate GET and POST methods. 04</paragraph>
 <object index="1066" name="Table4" object_type="table"/>
 <paragraph index="1068" node_type="writer" parent_index="1066">eature</paragraph>
 <paragraph index="1071" node_type="writer" parent_index="1066">GET Method</paragraph>
 <paragraph index="1074" node_type="writer" parent_index="1066">POST Method</paragraph>
 <object index="1077" name="Table5" object_type="table"/>
 <paragraph index="1079" node_type="writer" parent_index="1077">Data Visibility</paragraph>
 <paragraph index="1082" node_type="writer" parent_index="1077">Appends data to the URL, visible to users.</paragraph>
 <paragraph index="1085" node_type="writer" parent_index="1077">Data is sent in the request body, hidden.</paragraph>
 <object index="1088" name="Table6" object_type="table"/>
 <paragraph index="1090" node_type="writer" parent_index="1088">Data Size</paragraph>
 <paragraph index="1093" node_type="writer" parent_index="1088">Limited to URL length (around 2000 characters).</paragraph>
 <paragraph index="1096" node_type="writer" parent_index="1088">No limit on data size.</paragraph>
 <object index="1099" name="Table7" object_type="table"/>
 <paragraph index="1101" node_type="writer" parent_index="1099">Use Case</paragraph>
 <paragraph index="1104" node_type="writer" parent_index="1099">Ideal for fetching data (e.g., search queries).</paragraph>
 <paragraph index="1107" node_type="writer" parent_index="1099">Suitable for sending sensitive data (e.g., login forms).</paragraph>
 <object index="1110" name="Table8" object_type="table"/>
 <paragraph index="1112" node_type="writer" parent_index="1110">Security</paragraph>
 <paragraph index="1115" node_type="writer" parent_index="1110">Less secure, as data is visible in URL.</paragraph>
 <paragraph index="1118" node_type="writer" parent_index="1110">More secure, as data is not exposed in URL.</paragraph>
 <object index="1121" name="Table9" object_type="table"/>
 <paragraph index="1123" node_type="writer" parent_index="1121">Caching</paragraph>
 <paragraph index="1126" node_type="writer" parent_index="1121">Cached by browsers, bookmarks possible.</paragraph>
 <paragraph index="1129" node_type="writer" parent_index="1121">Not cached or bookmarked.</paragraph>
 <object index="1132" name="Table10" object_type="table"/>
 <paragraph index="1134" node_type="writer" parent_index="1132">Performance</paragraph>
 <paragraph index="1137" node_type="writer" parent_index="1132">Faster, as data is sent in URL.</paragraph>
 <paragraph index="1140" node_type="writer" parent_index="1132">Slightly slower, as data is sent in the body.</paragraph>
 <paragraph index="1146" node_type="writer">OR(c) Prepare a java script solution to validate registration form including email address entered by user. 07</paragraph>
 <paragraph index="1147" node_type="writer">W21</paragraph>
 <paragraph index="1148" node_type="writer">(a) Interpret PHP Function: Implode and Explode 03RE</paragraph>
 <paragraph index="1149" node_type="writer">(b) Differentiate GET and POST methods. 04RE</paragraph>
 <paragraph index="1150" node_type="writer">(c) Prepare a java script solution to validate registration form including email address entered by user. 07RE</paragraph>
 <paragraph index="1151" node_type="writer">OR(a) Discuss Java script alert, prompt, confirm with example. 03 RE</paragraph>
 <paragraph index="1152" node_type="writer">OR(b) Demonstrate functionality of following java script methods: substring, Slice, getDate, charAt 04</paragraph>
 <paragraph index="1153" node_type="writer">OR(c) Prepare a java script to find whether entered number by user is Prime or Not. 07</paragraph>
 <paragraph index="1163" node_type="writer">Q.5</paragraph>
 <paragraph index="1164" node_type="writer">W23</paragraph>
 <paragraph index="1165" node_type="writer">(a) Write the benefits of JQuery. 03</paragraph>
 <paragraph index="1166" node_type="writer">(b) Write the limitations of AJAX. 04</paragraph>
 <paragraph index="1167" node_type="writer">(c) Write a program to connect database using PHP. And write query for insert and delete data. 07</paragraph>
 <paragraph index="1168" node_type="writer">OR(a) What are the advantages of AJAX. 03</paragraph>
 <paragraph index="1169" node_type="writer">OR(b) What are the protocols used by AJAX? 04</paragraph>
 <paragraph index="1170" node_type="writer">OR(c) Using JQuery write program to create image slider. 07</paragraph>
 <paragraph index="1171" node_type="writer">W22</paragraph>
 <paragraph index="1172" node_type="writer">(a) Define term: JQUERY 03</paragraph>
 <paragraph index="1173" node_type="writer">(b) Prepare a PHP Code to read and write content from File. 04</paragraph>
 <paragraph index="1174" node_type="writer">(c) Prepare a PHP Code to manage online shopping cart using session. 07</paragraph>
 <paragraph index="1175" node_type="writer">OR(a) Define term: AJAX 03</paragraph>
 <paragraph index="1176" node_type="writer">OR(b) Differentiate Cookie and Session. 04 RE</paragraph>
 <paragraph index="1177" node_type="writer">OR(c) Develop a web page which contains two list box. First list ask to select State and according to state selection second list box loads name of city. Develop it using AJAX. 07</paragraph>
 <paragraph index="1178" node_type="writer">W21</paragraph>
 <paragraph index="1179" node_type="writer">(a) Define term: AJAX 03 RE</paragraph>
 <paragraph index="1180" node_type="writer">(b) Differentiate Cookie and Session. 04 RE</paragraph>
 <paragraph index="1181" node_type="writer">(c) Develop a web page which contains two list box. First list ask to select State and according to state selection second list box loads name of city. Develop it using AJAX. 07 RE</paragraph>
 <paragraph index="1182" node_type="writer">OR(a) Define term: JQUERY 03 RE</paragraph>
 <paragraph index="1183" node_type="writer">OR(b) Prepare a PHP Code to read and write content from File. 04 RE</paragraph>
 <paragraph index="1184" node_type="writer">OR(c) Prepare a PHP Code to manage online shopping cart using session. 07 RE</paragraph>
</indexing>
